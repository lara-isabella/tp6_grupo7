package ar.edu.unju.escmi.tp6.principal;

import java.util.Scanner;
import java.time.LocalDate;

import ar.edu.unju.escmi.tp6.dominio.*;
import ar.edu.unju.escmi.tp6.utils.FechaUtil;
import ar.edu.unju.escmi.tp6.collections.*;
import ar.edu.unju.escmi.tp6.exceptions.*;

/**
 * Clase Principal: punto de entrada del sistema de pr√©stamos de libros.
 * Controla el men√∫ y gestiona las operaciones principales.
 */
public class Principal {

    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        precargarDatos(); // opcional para pruebas

        int opcion;
        do {
            mostrarMenu();
            opcion = leerEntero();
            switch (opcion) {
                case 1 -> registrarLibro();
                case 2 -> registrarUsuario();
                case 3 -> registrarPrestamo();
                case 4 -> registrarDevolucion();
                case 5 -> mostrarListados();
                case 6 -> System.out.println("\nüëã Programa finalizado.");
                default -> System.out.println("‚ö†Ô∏è  Opci√≥n inv√°lida, intente nuevamente.");
            }
        } while (opcion != 6);
    }

    // --------------------------------------------------------------------
    //  M√âTODOS DE LECTURA
    // --------------------------------------------------------------------
    public static int leerEntero() {
        while (true) {
            try {
                String linea = scanner.nextLine();
                if (linea.trim().isEmpty()) {
                    throw new EntradaInvalidaException("No se ingres√≥ ning√∫n valor.");
                }
                return Integer.parseInt(linea.trim());
            } catch (NumberFormatException e) {
                System.out.print("‚ö†Ô∏è  Debe ingresar un n√∫mero. Intente nuevamente: ");
            } catch (EntradaInvalidaException e) {
                System.out.print("‚ö†Ô∏è  " + e.getMessage() + " Intente nuevamente: ");
            }
        }
    }

    public static String leerCadena() {
        return scanner.nextLine();
    }

    // --------------------------------------------------------------------
    //  MEN√ö PRINCIPAL
    // --------------------------------------------------------------------
    private static void mostrarMenu() {
        System.out.println("\n========= SISTEMA DE BIBLIOTECA =========");
        System.out.println("1 - Registrar libro");
        System.out.println("2 - Registrar usuario");
        System.out.println("3 - Registrar pr√©stamo");
        System.out.println("4 - Registrar devoluci√≥n");
        System.out.println("5 - Mostrar listados");
        System.out.println("6 - Salir");
        System.out.print("Seleccione una opci√≥n: ");
    }

    // --------------------------------------------------------------------
    //  REGISTRO DE LIBROS Y USUARIOS
    // --------------------------------------------------------------------
    private static void registrarLibro() {
        System.out.println("\nüìö Registrar nuevo libro");
        System.out.print("ID: ");
        int id = leerEntero();
        System.out.print("T√≠tulo: ");
        String titulo = leerCadena();
        System.out.print("Autor: ");
        String autor = leerCadena();
        System.out.print("ISBN (n√∫mero): ");
        int isbn = leerEntero();

        Libro libro = new Libro(id, titulo, autor, isbn, true);
        CollectionLibro.agregarLibro(libro);
        System.out.println("‚úÖ Libro registrado correctamente.");
    }

    private static void registrarUsuario() {
        System.out.println("\nüë§ Registrar nuevo usuario");
        System.out.print("Tipo (1-Alumno / 2-Bibliotecario): ");
        int tipo = leerEntero();

        System.out.print("ID: ");
        int id = leerEntero();
        System.out.print("Nombre: ");
        String nombre = leerCadena();
        System.out.print("Apellido: ");
        String apellido = leerCadena();
        System.out.print("Email: ");
        String email = leerCadena();

        if (tipo == 1) {
            System.out.print("Curso: ");
            String curso = leerCadena();
            System.out.print("N¬∞ Libreta: ");
            int numLibreta = leerEntero();
            Alumno alumno = new Alumno(id, nombre, apellido, email, curso, numLibreta);
            CollectionUsuario.agregarUsuario(alumno);
        } else {
            System.out.print("Legajo: ");
            int legajo = leerEntero();
            Bibliotecario bibliotecario = new Bibliotecario(id, nombre, apellido, email, legajo);
            CollectionUsuario.agregarUsuario(bibliotecario);
        }
        System.out.println("‚úÖ Usuario registrado correctamente.");
    }

    // --------------------------------------------------------------------
    //  REGISTRO DE PR√âSTAMOS Y DEVOLUCIONES
    // --------------------------------------------------------------------
    private static void registrarPrestamo() {
        System.out.println("\nüìñ Registrar pr√©stamo");

        try {
            System.out.print("ID del pr√©stamo: ");
            int idPrestamo = leerEntero();
            System.out.print("ID del usuario: ");
            int idUsuario = leerEntero();
            System.out.print("ID del libro: ");
            int idLibro = leerEntero();
            System.out.print("Fecha del pr√©stamo (dd/MM/yyyy): ");
            String fechaStr = leerCadena();

            Usuario usuario = CollectionUsuario.buscarUsuario(idUsuario);
            Libro libro = CollectionLibro.buscarLibros(idLibro); // puede lanzar excepciones
            LocalDate fechaPrestamo = FechaUtil.convertirStringLocalDate(fechaStr);

            Prestamo nuevo = new Prestamo(idPrestamo, fechaPrestamo, null, libro, usuario);
            CollectionPrestamo.guardarPrestamo(nuevo);
            libro.setEstado(false); // marcar como no disponible
            System.out.println("‚úÖ Pr√©stamo registrado correctamente.");

        } catch (UsuarioNoRegistradoException e) {
            System.out.println("‚ö†Ô∏è  " + e.getMessage());
        } catch (LibroNoEncontradoException e) {
            System.out.println("‚ö†Ô∏è  " + e.getMessage());
        } catch (LibroNoDisponibleException e) {
            System.out.println("‚ö†Ô∏è  " + e.getMessage());
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è  Error inesperado: " + e.getMessage());
        }
    }

    private static void registrarDevolucion() {
        System.out.println("\nüîÅ Registrar devoluci√≥n");

        try {
            System.out.print("ID del pr√©stamo: ");
            int idPrestamo = leerEntero();
            System.out.print("Fecha de devoluci√≥n (dd/MM/yyyy): ");
            String fechaStr = leerCadena();

            Prestamo prestamo = CollectionPrestamo.buscarPrestamo(idPrestamo);
            LocalDate fechaDevolucion = FechaUtil.convertirStringLocalDate(fechaStr);
            prestamo.registrarDevolucion(fechaDevolucion);

            System.out.println("‚úÖ Devoluci√≥n registrada correctamente.");
        } catch (PrestamoNoEncontradoException e) {
            System.out.println("‚ö†Ô∏è  " + e.getMessage());
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è  Error al registrar la devoluci√≥n: " + e.getMessage());
        }
    }

    // --------------------------------------------------------------------
    //  LISTADOS
    // --------------------------------------------------------------------
    private static void mostrarListados() {
        System.out.println("\nüìã Listados disponibles:");
        System.out.println("1 - Libros");
        System.out.println("2 - Usuarios");
        System.out.println("3 - Pr√©stamos");
        System.out.print("Seleccione una opci√≥n: ");
        int opcion = leerEntero();

        switch (opcion) {
            case 1 -> CollectionLibro.mostrarLibros();
            case 2 -> CollectionUsuario.mostrarUsuarios();
            case 3 -> CollectionPrestamo.mostrarPrestamos();
            default -> System.out.println("Opci√≥n inv√°lida.");
        }
    }

    // --------------------------------------------------------------------
    //  PRE-CARGA DE DATOS (opcional)
    // --------------------------------------------------------------------
    private static void precargarDatos() {
        // Precarga m√≠nima de ejemplo (opcional)
        if (CollectionLibro.libros.isEmpty()) {
            CollectionLibro.agregarLibro(new Libro(1, "El Principito", "Antoine de Saint-Exup√©ry", 1111, true));
            CollectionLibro.agregarLibro(new Libro(2, "Java B√°sico", "Autor An√≥nimo", 2222, true));
        }

        if (CollectionUsuario.usuarios.isEmpty()) {
            Alumno a = new Alumno(1, "Luisana", "Pereira", "luli@ejemplo.com", "4A", 1234);
            Bibliotecario b = new Bibliotecario(2, "Yamila", "G√≥mez", "yami@ejemplo.com", 500);
            CollectionUsuario.agregarUsuario(a);
            CollectionUsuario.agregarUsuario(b);
        }
    }
}
